//************************************************************************************
// 
// フェード[fade.cpp]
// 編集者：伊地田真衣
// 
//************************************************************************************

//-------------------- インクルード部 --------------------
#include "Fade.h"
#include "polygon.h"
//#include "Sound.h"

//-------------------- 静的メンバ --------------------
eSCENE Fade::nextScene = SCENE_NONE;
eFade Fade::stateFade = FADE_NONE;

//-------------------- 定数定義 --------------------
#define FADE_RATE	0.02f		// フェードインフェードアウトの速度

//-------------------- グローバル変数定義 --------------------

//====================================================================================
//
//				コンストラクタ
//
//====================================================================================
Fade::Fade(){
	//eNowScene = Scene::SCENE_NONE;
	Init();
}


//====================================================================================
//
//				デストラクタ
//
//====================================================================================
Fade::~Fade() {
	Uninit();
}



//====================================================================================
//
//				初期化
//
//====================================================================================
void Fade::Init() {
	red = 1.0f;		// フェードアウト色
	green = 1.0f;
	blue = 1.0f;
	alpha = 1.0f;	// 透明度
	stateFade = FADE_IN;
	nextScene = SCENE_TITLE;
}


//====================================================================================
//
//				終了
//
//====================================================================================
void Fade::Uninit() {
	stateFade = FADE_NONE;
	alpha = 0.0f;
}


//====================================================================================
//
//				更新
//
//====================================================================================
void Fade::Update() {
	switch (stateFade) {
	case FADE_NONE:
		break;
	case FADE_OUT:
		alpha += FADE_RATE;		// 不透明度を増す
		if (alpha >= 1.0f) {
			// フェードイン処理に切り替え
			alpha = 1.0f;
			stateFade = FADE_IN;
			SceneManager::SetScene(nextScene);
		}
		//CSound::SetVolume(1.0f - g_fAlpha);
		break;
	case FADE_IN:
		alpha -= FADE_RATE;		// 透明度を増す
		if (alpha <= 0.0f) {
			// フェードインを終了する
			alpha = 0.0f;
			stateFade = FADE_NONE;
		}
		// ボリュームもフェードイン
		//CSound::SetVolume(1.0f - g_fAlpha);
		break;
	default:
		break;
	}
}


//====================================================================================
//
//				描画
//
//====================================================================================
void Fade::Draw() {
	SetBlendState(BS_ADDITIVE);		// 加算合成
	SetZWrite(false);	// 半透明描画はZバッファを更新しない(Zチェックは行う)

	// 画面全体に半透明の矩形を描画
	SetPolygonPos(0.0f, 0.0f);
	SetPolygonSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	SetPolygonUV(0.0f, 0.0f);
	SetPolygonFrameSize(1.0f, 1.0f);
	SetPolygonTexture(nullptr);
	SetPolygonColor(red, green, blue);
	SetPolygonAlpha(alpha);
	DrawPolygon(GetDeviceContext());
	// 元に戻す
	SetPolygonColor(1.0f, 1.0f, 1.0f);
	SetPolygonAlpha(1.0f);

	SetZWrite(true);
	SetBlendState(BS_NONE);
}



//====================================================================================
//
//				フェードアウト開始
//
//====================================================================================
void Fade::StartFadeOut(eSCENE eScene) {
	if (stateFade != FADE_OUT) {
		//eNowScene = eScene;
		stateFade = FADE_OUT;
		alpha = 0.0f;
		nextScene = eScene;
	}
}


//====================================================================================
//
//				状態取得
//
//====================================================================================
eFade Fade::GetFade() {
	return stateFade;
}


//====================================================================================
//
//				フェード色設定
//
//====================================================================================
void Fade::SetFadeColor(float fR, float fG, float fB) {
	red = fR;
	green = fG;
	blue = fB;
}
