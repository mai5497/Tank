//************************************************************************************
//
// 壁オブジェクト [WallObject.cpp]
// Author : 伊地田真衣
//
//************************************************************************************

//-------------------- インクルード部 --------------------
#include "WallObject.h"
#include "input.h"
#include "debugproc.h"
#include "bullet.h"
#include "effect.h"
#include "collision.h"
#include "player.h"
#include "DebugCollision.h"
#include "enemy.h"
#include "Astar.h"
#include "DwarfEffect.h"
#include "Texture.h"

//-------------------- マクロ定義 --------------------
#define MODEL_WALLOBJ		("data/model/rubikcube.fbx")
#define TOON_TEXTURE		("data/model/ramp.png")
#define	WALLOBJ_RADIUS		(55.0f)		// 境界球半径

std::unique_ptr<CAssimpModel> WallObj::pMyModel;
int WallObj::wallMap[MAX_STAGE][MAPHEIGHT][MAPWIDTH] = 
{ 
	// 1
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	}, 

	// 2
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 3
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,2,0,0,0,0,2,0,0,0,0,0,2,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 4
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,2,0,0,0,0,2,0,0,0,0,0,2,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 5
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,2,0,0,0,2,0,0,2,0,0,0,2,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 6
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 7
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 8
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 9
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	},

	// 10
	{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,
	1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	}
};

//====================================================================================
//
//				コンストラクタ
//
//====================================================================================
WallObj::WallObj() {

}

WallObj::WallObj(int mapIndex_x, int mapindex_y) {
	// インデックスを保存
	mapIndex.x = mapIndex_x;
	mapIndex.y = mapindex_y;
}


//====================================================================================
//
//				デストラクタ
//
//====================================================================================
WallObj::~WallObj() {

}


//====================================================================================
//
//				初期化
//
//====================================================================================
void WallObj::Init() {
	// モデルデータの読み込み
	if (!pMyModel) {
		pMyModel = std::make_unique<CAssimpModel>();
		ID3D11Device* pDevice = GetDevice();
		ID3D11DeviceContext* pDeviceContext = GetDeviceContext();

		// モデルデータ読込
		if (!pMyModel->Load(pDevice, pDeviceContext, MODEL_WALLOBJ)) {
			MessageBoxA(GetMainWnd(), "壁モデルデータ読み込みエラー", "InitWallObj", MB_OK);
		}

		// マップの設定も一度行えばよいためモデル読込と同居させとく
		int* pMap = (int*)wallMap;
		SetMap(pMap);
	}

	if (wallMap[mapIndex.y][mapIndex.x] != 0) {
		// 位置・回転・スケールの初期設定
		size = XMFLOAT3(1.0f, 1.0f, 1.0f);
		moveVal = XMFLOAT3(0.0f, 0.0f, 0.0f);
		collRadius = WALLOBJ_RADIUS;
		collSize = XMFLOAT3(30.0f, 30.0f, 30.0f);

		rotModel = XMFLOAT3(0.0f, 0.0f, 0.0f);

		isCollision = true;
		collType = Collision::STATIC;
		myTag = WALL;

		XMMATRIX _mtxWorld, _mtxRot, _mtxTranslate, _mtxScale;

		pos = XMFLOAT3(mapIndex.x * 80.0f + 40.0f - 640.0f, 40.0f, -mapIndex.y * 80.0f - 40.0f + 480.0f);
		// ワールドマトリックスの初期化
		_mtxWorld = XMMatrixIdentity();

		// スケールを反映
		_mtxScale = XMMatrixScaling(size.x, size.y, size.z);
		_mtxWorld = XMMatrixMultiply(_mtxScale, _mtxWorld);

		// 回転を反映
		_mtxRot = XMMatrixRotationRollPitchYaw(XMConvertToRadians(rotModel.x), XMConvertToRadians(rotModel.y), XMConvertToRadians(rotModel.z));
		_mtxWorld = XMMatrixMultiply(_mtxWorld, _mtxRot);

		// 移動を反映
		_mtxTranslate = XMMatrixTranslation(pos.x, pos.y, pos.z);
		_mtxWorld = XMMatrixMultiply(_mtxWorld, _mtxTranslate);

		// ワールドマトリックス設定
		XMStoreFloat4x4(&mtxWorld, _mtxWorld);
	}
}

//====================================================================================
//
//				終了
//
//====================================================================================
void WallObj::Uninit() {
	// モデルの解放
	if (pMyModel) {
		pMyModel->Release();
		pMyModel.reset();
	}
}

//====================================================================================
//
//				更新
//
//====================================================================================
void WallObj::Update() {
}

//====================================================================================
//
//				描画
//
//====================================================================================
void WallObj::Draw() {
	ID3D11DeviceContext* pDC = GetDeviceContext();
	SetZWrite(true);				// Zバッファ更新する
	SetBlendState(BS_NONE);			// アルファブレンド無効

	// 不透明部分を描画
	pMyModel->Draw(pDC, mtxWorld, eOpacityOnly);

	// 半透明部分を描画
	SetBlendState(BS_ALPHABLEND);	// アルファブレンド有効
	SetZWrite(false);				// Zバッファ更新しない
	pMyModel->Draw(pDC, mtxWorld, eTransparentOnly);
	SetZWrite(true);				// Zバッファ更新する
	SetBlendState(BS_NONE);			// アルファブレンド無効

	// デバッグ表示
	//DrawCollisionSphere(this);
}